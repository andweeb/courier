// ************************************************************************** //
//								To-do List:
// ************************************************************************** //
// 
// In ui.js - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 1. Store the selected file items in an array
// 2. Change the way login in which the sftp commands are executed
//		(start using the new selected file item array)
// 3. Find a different style to change on a drag over (opposed to background color)
// 4. Implement a right-click context menu with options:
//		- mkdir/rmdir
//		- create new/remove file 
//		- rename file
//		- compress file (tar/zip?)
//		- copy
//		- paste
//		- preview
// 5. Implement a way of previewing or opening the files 
//		(on a certain button? space-bar? enter key?)
// 6. Show a confirmation message before file transfer occurs (with file details)
// 7. Create buttons for message boxes Confirm/OK/Cancel/etc
// 8. Find a way to efficiently deploy different message boxes depending 
//		on context/type
// 9. Maybe extract the event listeners and compile them into a different file?
// 10. Change the layout of the login screen (make it consistent with the main ui)
// 11. Enable drag events for the back button (to move files to the previous dir)
// 
// 
// In sftp.js - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 1. Find a way to transfer multiple files (socket emits in a loop?)
// 2. Determine the optimal fastPut/Get options depending on file size
// 3. Combine the put and get functions
// 4. Devise the logic to go about transferring directories:
//		a). Compression and transfer, b). directory traversal and sub-transfers
// 
//
// In general - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 1. Read up on some computer security (SSL tunneling/Redis?)
// 2. Generation of public/private keys? Encrypt user credentials sent to server
// 3. Fix the strange behavior of socket connections somehow accumulating over time
// 4. Need to implement lots of error checking:
//		Error messages upon socket & sftp disconnects,
//		Ping the sftp server (setTimeout?) to check for disconnection
//		Display error message upon invalid credentials
//		Find a way to check for file transfer timeouts (resume/pause/cancel)
//	
// ************************************************************************** //
